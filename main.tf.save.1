locals {
  ssh_user         = "ubuntu"
  key_name         = "2instance"
  private_key_path = "./2instance.pem"
}

terraform {
    required_providers {
        aws = {
            source = "hashicorp/aws"
            version = " ~> 4.0"
        }
    }
}

provider "aws" {
  region = "us-east-1"
  access_key = "${var.access_key}"
  secret_key = "${var.secret_key}"
}

# VPC BLOCK

# creating VPC
resource "aws_vpc" "custom_vpc" {
   cidr_block       = var.vpc_cidr
   enable_dns_hostnames = true
   enable_dns_support = true

   tags = {
      name = "custom_vpc"
   }
}

# public subnet 1
resource "aws_subnet" "public_subnet1" {   
   vpc_id            = aws_vpc.custom_vpc.id
   cidr_block        = var.public_subnet1
   availability_zone = var.az1
   map_public_ip_on_launch = true

   tags = {
      name = "public_subnet1"
   }
}

# public subnet 2
resource "aws_subnet" "public_subnet2" {  
  vpc_id            = aws_vpc.custom_vpc.id
  cidr_block        = var.public_subnet2
  availability_zone = var.az2
  map_public_ip_on_launch = true

  tags = {
     name = "public_subnet2"
  }
}

# creating internet gateway 
resource "aws_internet_gateway" "igw" {
   vpc_id = aws_vpc.custom_vpc.id

   tags = {
      name = "igw"
   }
}

# creating route table
resource "aws_route_table" "rt" {
   vpc_id = aws_vpc.custom_vpc.id
   route {
      cidr_block = "0.0.0.0/0"
      gateway_id = aws_internet_gateway.igw.id
  }

  tags = {
      name = "rt"
  }
}

# associate route table to the public subnet 1
resource "aws_route_table_association" "public_rt1" {
   subnet_id      = aws_subnet.public_subnet1.id
   route_table_id = aws_route_table.rt.id
}

# associate route table to the public subnet 2
resource "aws_route_table_association" "public_rt2" {
   subnet_id      = aws_subnet.public_subnet2.id
   route_table_id = aws_route_table.rt.id
}

# SECURITY BLOCK

# create security groups for vpc (web_sg), webserver

# custom vpc security group 
resource "aws_security_group" "web_sg" {
   name        = "web_sg"
   description = "allow inbound HTTP traffic"
   vpc_id      = aws_vpc.custom_vpc.id

   # HTTP from vpc
   ingress {
      from_port   = 80
      to_port     = 80
      protocol    = "tcp"
      cidr_blocks = ["0.0.0.0/0"]     
   }
   ingress {
     from_port       = 22
     to_port         = 22
     protocol        = "tcp"
     cidr_blocks = ["0.0.0.0/0"]
  }
    ingress {
     from_port       = 443
     to_port         = 443
     protocol        = "tcp"
     cidr_blocks = ["0.0.0.0/0"]
  }

  # outbound rules
  # internet access to anywhere
  egress {
     from_port   = 0
     to_port     = 0
     protocol    = "-1"
     cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
     name = "web_sg"
  }
}


# web tier security group
resource "aws_security_group" "webserver_sg" {
  name        = "webserver_sg"
  description = "allow inbound traffic from ALB"
  vpc_id      = aws_vpc.custom_vpc.id

  # allow inbound traffic from alb
  ingress {
     from_port       = 80
     to_port         = 80
     protocol        = "tcp"
     security_groups = [aws_security_group.alb_sg.id]
  }
  ingress {
     from_port       = 22
     to_port         = 22
     protocol        = "tcp"
     cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
     from_port = "0"
     to_port   = "0"
     protocol  = "-1"
     cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
     name = "webserver_sg"
  }
}

resource "aws_security_group" "alb_sg" {
  name        = "alb_sg"
  description = "allow inbound traffic from ALB"
  vpc_id      = aws_vpc.custom_vpc.id

  # allow inbound traffic from web
  ingress {
     from_port       = 80
     to_port         = 80
     protocol        = "tcp"
     cidr_blocks    = ["0.0.0.0/0"]
  }
  egress {
     from_port = "0"
     to_port   = "0"
     protocol  = "-1"
     cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
     name = "alb_sg"
  }
}

resource "aws_instance" "example" {
  count                   = var.instance_count
  ami                     = var.ec2_instance_ami
  availability_zone       = var.az1
  subnet_id               = aws_subnet.public_subnet1.id
  instance_type           = var.ec2_instance_type
  key_name                = local.key_name
  vpc_security_group_ids  = [aws_security_group.webserver_sg.id]
  associate_public_ip_address = true
 #   provisioner "local-exec" {
  #  command = "echo ${aws_instance.example[count.index].public_ip} >> inventory"
 # }   
    provisioner "remote-exec" {
    inline = ["echo 'wait until SSH is ready'"]

    connection {
      host        = self.public_ip
      type        = "ssh"
      user        = local.ssh_user
      private_key = file(local.private_key_path)
   }
  }
  # provisioner "local-exec" {
  #  command = "echo ${aws_instance.example[count.index].public_ip} >> inventory"
  #}
}

# Create the inventory file
resource "local_file" "inventory_file" {
#  content  = "${aws_instance.example[count.index].public_ip}"
  content = <<-EOT
    %{ for ip in aws_instance.example.*.public_ip ~}
    ${ip}
    %{ endfor ~}
  EOT
  filename = "host-inventory"
}

# Run the Ansible playbook
resource "null_resource" "run_playbook" {
  provisioner "local-exec" {
    command = "ansible-playbook -i host-inventory web.yml"
  }
  depends_on = [local_file.inventory_file]
}

#  ALB BLOCK

# only alpha numeric and hyphen is allowed in name
# alb target group
resource "aws_lb_target_group" "external_target_g" {
  name        = "external-target-group"
  port        = 80
  protocol    = "HTTP"
  vpc_id      = aws_vpc.custom_vpc.id
}

resource "aws_lb_target_group_attachment" "ec2_1_target_g" {
  count             = var.instance_count
  target_group_arn  = aws_lb_target_group.external_target_g.arn
  target_id         = aws_instance.example[count.index].id
  port              = 80
}

# ALB
resource "aws_lb" "external_lb" {
  name                = "external-LB"
  internal            = false
  load_balancer_type  = "application"
  security_groups     = [aws_security_group.alb_sg.id]
  subnets             = [aws_subnet.public_subnet1.id,aws_subnet.public_subnet2.id]

  tags = {
      name = "external-ALB"
  }
}

# create ALB listener
resource "aws_lb_listener" "alb_listener" {
  load_balancer_arn = aws_lb.external_lb.arn
  port              = "80"
  protocol          = "HTTP"
  default_action {
    type              = "forward"
    target_group_arn  = aws_lb_target_group.external_target_g.arn
  }
}

output "alb_dns_name" {
  description = "DNS name of the load balancer"
  value       = "${aws_lb.external_lb.dns_name}"
}

